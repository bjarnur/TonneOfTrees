#version 330 core

layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;

out float dist_c;

uniform mat4 model;
uniform mat4 view;
uniform mat4 project;

uniform vec3 model_center;
uniform vec3 camera_forward;

void main()
{
	//Get world-space location of points    
	gl_Position = model * vec4(aPos, 1.0);
	vec4 transformed_model_center = model * vec4(model_center, 1.0);

	//Compute distance from current fragment to center plane
	//float d = dot(camera_forward, transformed_model_center.xyz);
	//dist_c = abs((dot(camera_forward, gl_Position.xyz) + d)/ dot(camera_forward, camera_forward));

	//An alternative implementation
	float sn = -dot(vec4(camera_forward, 1.0), (gl_Position - transformed_model_center));
	float sd = dot(vec4(camera_forward, 1.0), vec4(camera_forward, 1.0));
	float sb = sn / sd;
	vec4 projected_point = gl_Position + (sb * vec4(camera_forward, 1.0));
	dist_c = distance(projected_point, gl_Position);

	//Set final position of vertex
	gl_Position = project * view * model * vec4(aPos, 1.0);
}